(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{440:function(t,a,s){"use strict";s.r(a);var i=s(65),v=Object(i.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"获取-git-仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取-git-仓库"}},[t._v("#")]),t._v(" 获取 Git 仓库")]),t._v(" "),s("p",[t._v("通常有两种获取 Git 项目仓库的方式：")]),t._v(" "),s("ol",[s("li",[t._v("将尚未进行版本控制的本地目录转换为 Git 仓库；")]),t._v(" "),s("li",[t._v("从其它服务器 "),s("strong",[t._v("克隆")]),t._v(" 一个已存在的 Git 仓库。")])]),t._v(" "),s("p",[t._v("两种方式都会在你的本地机器上得到一个工作就绪的 Git 仓库。")]),t._v(" "),s("h3",{attrs:{id:"在已存在目录中初始化仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在已存在目录中初始化仓库"}},[t._v("#")]),t._v(" 在已存在目录中初始化仓库")]),t._v(" "),s("p",[t._v("如果你有一个尚未进行版本控制的项目目录，想要用 Git 来控制它，那么首先需要进入该项目目录中。")]),t._v(" "),s("p",[t._v("在 Windows 上：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" /c/user/my_project\n")])])]),s("p",[t._v("之后执行：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n")])])]),s("p",[t._v("该命令将创建一个名为 "),s("code",[t._v(".git")]),t._v(" 的子目录，这个子目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是 Git 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。")]),t._v(" "),s("h3",{attrs:{id:"克隆现有的仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#克隆现有的仓库"}},[t._v("#")]),t._v(" 克隆现有的仓库")]),t._v(" "),s("p",[t._v("Git 克隆的是该 Git 仓库服务器上的几乎所有数据，而不是仅仅复制完成你的工作所需要文件。 当你执行 "),s("code",[t._v("git clone")]),t._v(" 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来")]),t._v(" "),s("p",[t._v("克隆仓库的命令是 "),s("code",[t._v("git clone <url>")]),t._v(" 。 比如，要克隆 Git 的链接库 "),s("code",[t._v("libgit2")]),t._v("，可以用下面的命令：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/libgit2/libgit2\n")])])]),s("p",[t._v("这会在当前目录下创建一个名为 “libgit2” 的目录，并在这个目录下初始化一个 "),s("code",[t._v(".git")]),t._v(" 文件夹， 从远程仓库拉取下所有数据放入 "),s("code",[t._v(".git")]),t._v(" 文件夹，然后从中读取最新版本的文件的拷贝。")]),t._v(" "),s("p",[t._v("如果你想在克隆远程仓库的时候，自定义本地仓库的名字，你可以通过额外的参数指定新的目录名：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/libgit2/libgit2 mylibgit\n")])])]),s("p",[t._v("这会执行与上一条命令相同的操作，但目标目录名变为了 "),s("code",[t._v("mylibgit")]),t._v("。")]),t._v(" "),s("p",[t._v("Git 支持多种数据传输协议。 上面的例子使用的是 "),s("code",[t._v("https://")]),t._v(" 协议，不过你也可以使用 "),s("code",[t._v("git://")]),t._v(" 协议或者使用 SSH 传输协议。")])])}),[],!1,null,null,null);a.default=v.exports}}]);