(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{439:function(t,i,s){"use strict";s.r(i);var a=s(65),e=Object(a.a)({},(function(){var t=this,i=t.$createElement,s=t._self._c||i;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"起步-初次运行-git-前的配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#起步-初次运行-git-前的配置"}},[t._v("#")]),t._v(" 起步 - 初次运行 Git 前的配置")]),t._v(" "),s("p",[t._v("定制你的 Git 环境。每台计算机上只需要配置一次，程序升级时会保留配置信息。你可以在任何时候再次通过运行命令来修改它们。")]),t._v(" "),s("p",[t._v("Git 自带一个 "),s("code",[t._v("git config")]),t._v(" 的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在三个不同的位置：")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("/etc/gitconfig")]),t._v(" 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果在执行 "),s("code",[t._v("git config")]),t._v(" 时带上 "),s("code",[t._v("--system")]),t._v(" 选项，那么它就会读写该文件中的配置变量。 （由于它是系统配置文件，因此你需要管理员或超级用户权限来修改它。）")]),t._v(" "),s("li",[s("code",[t._v("~/.gitconfig")]),t._v(" 或 "),s("code",[t._v("~/.config/git/config")]),t._v(" 文件：只针对当前用户。 你可以传递 "),s("code",[t._v("--global")]),t._v(" 选项让 Git 读写此文件，这会对你系统上 "),s("strong",[t._v("所有")]),t._v(" 的仓库生效。")]),t._v(" "),s("li",[t._v("当前使用仓库的 Git 目录中的 "),s("code",[t._v("config")]),t._v(" 文件（即 "),s("code",[t._v(".git/config")]),t._v("）：针对该仓库。 你可以传递 "),s("code",[t._v("--local")]),t._v(" 选项让 Git 强制读写此文件，虽然默认情况下用的就是它。。 （当然，你需要进入某个 Git 仓库中才能让该选项生效。）")])]),t._v(" "),s("p",[t._v("每一个级别会覆盖上一级别的配置，所以 "),s("code",[t._v(".git/config")]),t._v(" 的配置变量会覆盖 "),s("code",[t._v("/etc/gitconfig")]),t._v(" 中的配置变量。")]),t._v(" "),s("p",[t._v("在 Windows 系统中，Git 会查找 "),s("code",[t._v("$HOME")]),t._v(" 目录下（一般情况下是 "),s("code",[t._v("C:\\Users\\$USER")]),t._v(" ）的 "),s("code",[t._v(".gitconfig")]),t._v(" 文件。 Git 同样也会寻找 "),s("code",[t._v("/etc/gitconfig")]),t._v(" 文件，但只限于 MSys 的根目录下，即安装 Git 时所选的目标位置。 如果你在 Windows 上使用 Git 2.x 以后的版本，那么还有一个系统级的配置文件，Windows XP 上在 "),s("code",[t._v("C:\\Documents and Settings\\All Users\\Application Data\\Git\\config")]),t._v(" ，Windows Vista 及其以后的版本在 "),s("code",[t._v("C:\\ProgramData\\Git\\config")]),t._v(" 。此文件只能以管理员权限通过 "),s("code",[t._v("git config -f <file>")]),t._v(" 来修改。")]),t._v(" "),s("p",[t._v("你可以通过以下命令查看所有的配置以及它们所在的文件：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --list --show-origin\n")])])]),s("h2",{attrs:{id:"配置用户信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置用户信息"}},[t._v("#")]),t._v(" 配置用户信息")]),t._v(" "),s("p",[t._v("设置你的用户名和邮件地址。 这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John Doe"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.email johndoe@example.com\n")])])]),s("p",[t._v("再次强调，如果使用了 "),s("code",[t._v("--global")]),t._v(" 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 "),s("code",[t._v("--global")]),t._v(" 选项的命令来配置。")]),t._v(" "),s("h3",{attrs:{id:"检查配置信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#检查配置信息"}},[t._v("#")]),t._v(" 检查配置信息")]),t._v(" "),s("p",[t._v("如果想要检查你的配置，可以使用 "),s("code",[t._v("git config --list")]),t._v(" 命令来列出所有 Git 当时能找到的配置。")]),t._v(" "),s("p",[t._v("你可以通过输入 "),s("code",[t._v("git config <key>")]),t._v("： 来检查 Git 的某一项配置")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config user.name\nJohn Doe\n")])])])])}),[],!1,null,null,null);i.default=e.exports}}]);