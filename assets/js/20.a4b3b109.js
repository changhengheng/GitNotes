(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{448:function(t,e,s){"use strict";s.r(e);var a=s(65),v=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"远程分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#远程分支"}},[t._v("#")]),t._v(" 远程分支")]),t._v(" "),s("p",[t._v("远程引用是对远程仓库的引用（指针），包括分支、标签等等。 你可以通过 "),s("code",[t._v("git ls-remote <remote>")]),t._v(" 来显式地获得远程引用的完整列表， 或者通过 "),s("code",[t._v("git remote show <remote>")]),t._v(" 获得远程分支的更多信息。 然而，一个更常见的做法是利用远程跟踪分支。换言之，远程跟踪分支的作用就是获取远程分支的更多信息。")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("远程跟踪分支是远程分支状态的引用（指针）。它们是本地引用（远程跟踪分支是本地分支），你无法移动。一旦你进行了网络通信， Git 就会为你移动它们以精确反映远程仓库的状态。"),s("strong",[t._v("请将它们看做书签， 这样可以提醒你该分支在远程仓库中的位置就是你最后一次连接到它们的位置。")])]),t._v(" "),s("p",[t._v("它们以 "),s("code",[t._v("<remote>/<branch>")]),t._v(" 的形式命名（比如 "),s("code",[t._v("origin/master")]),t._v(" ）。")])]),t._v(" "),s("li",[s("p",[t._v("比如，新克隆一个远程仓库，Git 的 "),s("code",[t._v("clone")]),t._v(" 命令会为你自动将其命名为 "),s("code",[t._v("origin")]),t._v("，拉取它的所有数据， 创建一个指向它的 "),s("code",[t._v("master")]),t._v(" 分支的指针（远程分支），并且在本地将其命名为 "),s("code",[t._v("origin/master")]),t._v("（远程跟踪分支）。 Git 也会给你一个与 "),s("code",[t._v("origin")]),t._v(" 的 "),s("code",[t._v("master")]),t._v(" 分支在指向同一个地方的本地 "),s("code",[t._v("master")]),t._v(" 分支（本地分支），这样你就有工作的基础。")])]),t._v(" "),s("li",[s("p",[t._v("“origin” 并无特殊含义。远程仓库名字 “origin” 与分支名字 “master” 一样，在 Git 中并没有任何特别的含义。 同时 “master” 是当你运行 "),s("code",[t._v("git init")]),t._v(" 时默认的起始分支名字，原因仅仅是它的广泛使用， “origin” 是当你运行 "),s("code",[t._v("git clone")]),t._v(" 时默认的远程仓库名字。 如果你运行 "),s("code",[t._v("git clone -o booyah")]),t._v("，那么你默认的远程分支名字将会是 "),s("code",[t._v("booyah/master")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("本地与远程的工作可以分叉。如果你在本地的 "),s("code",[t._v("master")]),t._v(" 分支做了一些工作，在同一段时间内有其他人推送提交到 "),s("code",[t._v("origin")]),t._v("（远程仓库）。并且更新了它的 "),s("code",[t._v("master")]),t._v(" 分支（远程分支），这就是说你们的提交历史已走向不同的方向。 即便这样，只要你保持不与 "),s("code",[t._v("origin")]),t._v(" 服务器连接（并拉取数据），你的 "),s("code",[t._v("origin/master")]),t._v(" （远程跟踪分支）指针就不会移动。")])]),t._v(" "),s("li",[s("p",[t._v("如果要与给定的远程仓库同步数据，运行 "),s("code",[t._v("git fetch <remote>")]),t._v(" 命令（在本例中为 "),s("code",[t._v("git fetch origin")]),t._v("）。 这个命令查找 “origin” 是哪一个服务器， 从中抓取本地没有的数据，并且更新本地数据库，移动 "),s("code",[t._v("origin/master")]),t._v(" （远程跟踪分支）指针到更新之后的位置。")]),t._v(" "),s("p",[t._v("git pull 是 git fetch 和 git merge 的结合，会自动拉取远程仓库最新的数据并与当前本地分支合并。")])]),t._v(" "),s("li",[s("p",[t._v("（重点）当你想要公开分享一个分支时，需要将其推送到有写入权限的远程仓库上。 本地的分支并不会自动与远程仓库同步——你必须显式地推送想要分享的分支。运行 "),s("code",[t._v("git push <remote> <branch>")]),t._v(" （简写）推送一个本地的 "),s("code",[t._v("branch")]),t._v(" 分支作为远程仓库 "),s("code",[t._v("remote")]),t._v(" 的 "),s("code",[t._v("branch")]),t._v(" 分支。你也可以运行 "),s("code",[t._v("git push origin serverfix:serverfix")]),t._v("（全写）， 它会做同样的事——也就是说“推送本地的 "),s("code",[t._v("serverfix")]),t._v(" 分支，将其作为远程仓库的 "),s("code",[t._v("serverfix")]),t._v(" 分支”，可以通过这种格式来推送本地分支到一个命名不相同的远程分支。 如果并不想让远程仓库上的分支叫做 "),s("code",[t._v("serverfix")]),t._v("，可以运行 "),s("code",[t._v("git push origin serverfix:awesomebranch")]),t._v(" 来将本地的 "),s("code",[t._v("serverfix")]),t._v(" 分支推送到远程仓库上的 "),s("code",[t._v("awesomebranch")]),t._v(" 分支。")]),t._v(" "),s("p",[t._v("小结：")]),t._v(" "),s("ol",[s("li",[t._v("全写："),s("code",[t._v("git push <远程主机名> <本地分支名>:<远程分支名>")]),t._v("，比如 "),s("code",[t._v("git push origin master:master")])]),t._v(" "),s("li",[t._v("如果本地分支名与远程分支名相同，则可以省略冒号："),s("code",[t._v("git push <远程主机名> <本地分支名>")]),t._v("，比如 "),s("code",[t._v("git push origin master")])]),t._v(" "),s("li",[t._v("把本地的 "),s("code",[t._v("master")]),t._v(" 分支推送到远程的另一个 "),s("code",[t._v("main")]),t._v(" 分支： "),s("code",[t._v("git push origin master:main")])])])]),t._v(" "),s("li",[s("p",[t._v("（重点）下一次其他协作者从服务器上抓取数据时（"),s("code",[t._v("git fetch origin")]),t._v("），他们会在本地生成一个远程跟踪分支 "),s("code",[t._v("origin/serverfix")]),t._v("，指向服务器的 "),s("code",[t._v("serverfix")]),t._v(" 分支的引用。当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。 换一句话说，这种情况下，不会有一个新的 "),s("code",[t._v("serverfix")]),t._v(" 分支——只有一个不可以修改的 "),s("code",[t._v("origin/serverfix")]),t._v(" 指针。")]),t._v(" "),s("p",[t._v("可以运行 "),s("code",[t._v("git merge origin/serverfix")]),t._v(" 将这些工作合并到当前所在的分支。 如果想要在自己的 "),s("code",[t._v("serverfix")]),t._v(" 分支上工作，可以将其建立在远程跟踪分支之上：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b serverfix origin/serverfix\nBranch serverfix "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" up to track remote branch serverfix from origin.\nSwitched to a new branch "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'serverfix'")]),t._v("\n")])])]),s("p",[t._v("这会给你一个用于工作的本地分支，并且起点位于 "),s("code",[t._v("origin/serverfix")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("从一个远程跟踪分支检出（切换到另一个）一个本地分支会自动创建所谓的“跟踪分支”（它跟踪的分支叫做“上游分支”）。 跟踪分支是与远程分支有直接关系的本地分支。 如果在一个跟踪分支上输入 "),s("code",[t._v("git pull")]),t._v("，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。")]),t._v(" "),s("p",[t._v("当克隆一个仓库时，它通常会自动地创建一个跟踪 "),s("code",[t._v("origin/master")]),t._v(" 的 "),s("code",[t._v("master")]),t._v(" 分支。 然而，如果你愿意的话可以设置其他的跟踪分支，或是一个在其他远程仓库上的跟踪分支，又或者不跟踪 "),s("code",[t._v("master")]),t._v(" 分支。 最简单的实例就是像之前看到的那样，运行 "),s("code",[t._v("git checkout -b <branch> <remote>/<branch>")]),t._v("。 这是一个十分常用的操作所以 Git 提供了 "),s("code",[t._v("--track")]),t._v(" 快捷方式：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout --track origin/serverfix\nBranch serverfix "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" up to track remote branch serverfix from origin.\nSwitched to a new branch "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'serverfix'")]),t._v("\n")])])]),s("p",[t._v("由于这个操作太常用了，该捷径本身还有一个捷径。 如果你尝试检出的分支 (a) 不存在且 (b) 刚好只有一个名字与之匹配的远程分支，那么 Git 就会为你创建一个跟踪分支：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout serverfix\nBranch serverfix "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" up to track remote branch serverfix from origin.\nSwitched to a new branch "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'serverfix'")]),t._v("\n")])])]),s("p",[t._v("如果想要将本地分支与远程分支设置为不同的名字，你可以轻松地使用上一个命令增加一个不同名字的本地分支：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b sf origin/serverfix\nBranch sf "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" up to track remote branch serverfix from origin.\nSwitched to a new branch "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sf'")]),t._v("\n")])])]),s("p",[t._v("现在，本地分支 "),s("code",[t._v("sf")]),t._v(" 会自动从 "),s("code",[t._v("origin/serverfix")]),t._v(" 拉取。")]),t._v(" "),s("p",[t._v("设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支， 你可以在任意时间使用 "),s("code",[t._v("-u")]),t._v(" 或 "),s("code",[t._v("--set-upstream-to")]),t._v(" 选项运行 "),s("code",[t._v("git branch")]),t._v(" 来显式地设置。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -u origin/serverfix\nBranch serverfix "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" up to track remote branch serverfix from origin.\n")])])]),s("p",[t._v("如果想要查看设置的所有跟踪分支，可以使用 "),s("code",[t._v("git branch")]),t._v(" 的 "),s("code",[t._v("-vv")]),t._v(" 选项。 这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -vv\n  iss53     7e424c3 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("origin/iss53: ahead "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" forgot the brackets\n  master    1ae2a45 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("origin/master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" deploying index fix\n* serverfix f8674d9 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("teamone/server-fix-good: ahead "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(", behind "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" this should "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" it\n  testing   5ea463a trying something new\n")])])]),s("p",[t._v("这里可以看到 "),s("code",[t._v("iss53")]),t._v(" 分支正在跟踪 "),s("code",[t._v("origin/iss53")]),t._v(" 并且 “ahead” 是 2，意味着本地有两个提交还没有推送到服务器上。 也能看到 "),s("code",[t._v("master")]),t._v(" 分支正在跟踪 "),s("code",[t._v("origin/master")]),t._v(" 分支并且是最新的。 接下来可以看到 "),s("code",[t._v("serverfix")]),t._v(" 分支正在跟踪 "),s("code",[t._v("teamone")]),t._v(" 服务器上的 "),s("code",[t._v("server-fix-good")]),t._v(" 分支并且领先 3 落后 1， 意味着服务器上有一次提交还没有合并入同时本地有三次提交还没有推送。 最后看到 "),s("code",[t._v("testing")]),t._v(" 分支并没有跟踪任何远程分支。")]),t._v(" "),s("p",[t._v("需要重点注意的一点是这些数字的值来自于你从每个服务器上最后一次抓取的数据。 这个命令并没有连接服务器，它只会告诉你关于本地缓存的服务器数据。 如果想要统计最新的领先与落后数字，需要在运行此命令前抓取所有的远程仓库。 可以像这样做：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch --all"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -vv\n")])])])]),t._v(" "),s("li",[s("p",[t._v("当 "),s("code",[t._v("git fetch")]),t._v(" 命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。 它只会获取数据然后让你自己合并。 然而，有一个命令叫作 "),s("code",[t._v("git pull")]),t._v(" 在大多数情况下它的含义是一个 "),s("code",[t._v("git fetch")]),t._v(" 紧接着一个 "),s("code",[t._v("git merge")]),t._v(" 命令。 如果有一个像之前章节中演示的设置好的跟踪分支，不管它是显式地设置还是通过 "),s("code",[t._v("clone")]),t._v(" 或 "),s("code",[t._v("checkout")]),t._v(" 命令为你创建的，"),s("code",[t._v("git pull")]),t._v(" 都会查找当前分支所跟踪的服务器与分支， 从服务器上抓取数据然后尝试合并入那个远程分支。")]),t._v(" "),s("p",[t._v("由于 "),s("code",[t._v("git pull")]),t._v(" 的魔法经常令人困惑所以通常单独显式地使用 "),s("code",[t._v("fetch")]),t._v(" 与 "),s("code",[t._v("merge")]),t._v(" 命令会更好一些。")])]),t._v(" "),s("li",[s("p",[t._v("假设你已经通过远程分支做完所有的工作了——也就是说你和你的协作者已经完成了一个特性， 并且将其合并到了远程仓库的 "),s("code",[t._v("master")]),t._v(" 分支（或任何其他稳定代码分支）。 可以运行带有 "),s("code",[t._v("--delete")]),t._v(" 选项的 "),s("code",[t._v("git push")]),t._v(" 命令来删除一个远程分支。 如果想要从服务器上删除 "),s("code",[t._v("serverfix")]),t._v(" 分支，运行下面的命令：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin --delete serverfix\nTo https://github.com/schacon/simplegit\n - "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("deleted"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("         serverfix\n")])])]),s("p",[t._v("基本上这个命令做的只是从服务器上移除这个指针。 Git 服务器通常会保留数据一段时间直到垃圾回收运行，所以如果不小心删除掉了，通常是很容易恢复的。")])])]),t._v(" "),s("h2",{attrs:{id:"其他补充"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他补充"}},[t._v("#")]),t._v(" 其他补充")]),t._v(" "),s("p",[t._v("-u")]),t._v(" "),s("p",[t._v("--set-upstream")]),t._v(" "),s("p",[t._v("For every branch that is up to date or successfully pushed, add upstream (tracking) reference, used by argument-less [git-pull"),s("a",{attrs:{href:"https://git-scm.com/docs/git-pull",target:"_blank",rel:"noopener noreferrer"}},[t._v("1]"),s("OutboundLink")],1),t._v(" and other commands. For more information, see "),s("code",[t._v("branch.<name>.merge")]),t._v(" in [git-config"),s("a",{attrs:{href:"https://git-scm.com/docs/git-config",target:"_blank",rel:"noopener noreferrer"}},[t._v("1]"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"git-remote"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-remote"}},[t._v("#")]),t._v(" git remote")]),t._v(" "),s("p",[s("code",[t._v("remote")]),t._v(" 的完整意思是 remote repositories，即远程仓库，仅表示“不在本地的仓库”以区别于本地仓库。")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("git remote")]),t._v(" 可以查看你的本地仓库配置了哪些远程服务器（远程仓库）:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote\norigin\n")])])]),s("p",[t._v("至少应该看到"),s("code",[t._v("origin")]),t._v(" ——这是 Git 为你克隆的服务器提供的默认名称。")]),t._v(" "),s("p",[t._v("添加标识 "),s("code",[t._v("-v")]),t._v(" ，它会显示 Git 为在读取和写入该远程时使用的短名称存储的 URL：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote -v\norigin  https://github.com/changhengheng/BranchTest.git "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\norigin  https://github.com/changhengheng/BranchTest.git "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("push"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("如果您有多个remote（远程仓库），该命令会将它们全部列出。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote -v\nbakkdoor  https://github.com/bakkdoor/grit "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nbakkdoor  https://github.com/bakkdoor/grit "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("push"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncho45     https://github.com/cho45/grit "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncho45     https://github.com/cho45/grit "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("push"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndefunkt   https://github.com/defunkt/grit "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndefunkt   https://github.com/defunkt/grit "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("push"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nkoke      git://github.com/koke/grit.git "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nkoke      git://github.com/koke/grit.git "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("push"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\norigin    git@github.com:mojombo/grit.git "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\norigin    git@github.com:mojombo/grit.git "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("push"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("使用 "),s("code",[t._v("git remote show <remote>")]),t._v(" 查看有关 origin 的更多信息：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote show origin\n* remote origin\n  Fetch URL: https://github.com/schacon/ticgit //远程仓库的URL\n  Push  URL: https://github.com/schacon/ticgit //远程仓库的URL\n  HEAD branch: master // HEAD 分支，即当前所在本地分支\n  Remote branches: // 远程跟踪分支列表：跟踪远程的master分支和dev-branch分支\n    master                               tracked\n    dev-branch                           tracked\n  Local branch configured "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git pull'")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" // 如果您在master分支上并运行git pull，它会在获取远程分支master后自动将其合并             到本地分支。\n    master merges with remote master\n  Local ref configured "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git push'")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" // 如果您在master分支上并运行git push，它会将本地master分支的更新推送到远程             的master分支上。\n    master pushes to master "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("up to "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("date")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"推送和拉取的工作流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#推送和拉取的工作流"}},[t._v("#")]),t._v(" 推送和拉取的工作流")]),t._v(" "),s("p",[t._v("别人在远程"),s("code",[t._v("origin")]),t._v("推送了一个新的"),s("code",[t._v("issue")]),t._v("分支：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin issue:issue\n")])])]),s("p",[t._v("你需要拉取"),s("code",[t._v("issue")]),t._v("分支的工作进度，有两种拉取方式：")]),t._v(" "),s("p",[t._v("第一，使用"),s("code",[t._v("git fetch")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch origin issue\n")])])]),s("p",[t._v("这样会生成一个远程跟踪分支"),s("code",[t._v("origin/issue")]),t._v("，这只是一个指针，可以运行 "),s("code",[t._v("git merge origin/issue")]),t._v(" 将这些工作合并到当前所在的分支。")]),t._v(" "),s("p",[t._v("如果想要在自己的 "),s("code",[t._v("issue")]),t._v(" 分支上工作，可以运行 "),s("code",[t._v("git checkout -b <branch> <remote>/<branch>")]),t._v("将其建立在远程跟踪分支之上，这样就在本地建立了一个以 "),s("code",[t._v("branch")]),t._v(" 为名并且基于 "),s("code",[t._v("<remote>/<branch>")]),t._v(" 这个远程跟踪分支的新分支。")]),t._v(" "),s("p",[t._v("这是一个十分常用的操作所以 Git 提供了 "),s("code",[t._v("--track")]),t._v(" 快捷方式："),s("code",[t._v("$ git checkout --track origin/issue")]),t._v(" 。这个命令和上面的操作时等价的，即创建并切换到issue分支，并且这个分支是跟踪远程 "),s("code",[t._v("origin")]),t._v(" 的 "),s("code",[t._v("issue")]),t._v(" 分支的。")]),t._v(" "),s("p",[t._v("如果你尝试切换的分支 (a) 不存在且 (b) 刚好只有一个名字与之匹配的远程分支，那么 Git 就会为你创建一个跟踪分支："),s("code",[t._v("git checkout issue")]),t._v("，同样，这条命令也和上面的操作的是等价的。")]),t._v(" "),s("p",[t._v("如果想要将本地分支与远程分支设置为不同的名字，你可以轻松地使用上一个命令增加一个不同名字的本地分支："),s("code",[t._v("git checkout -b ise origin/issue")]),t._v("，操作也是等价的，只不过改变了本地分支的名字为"),s("code",[t._v("ise")]),t._v("，也是才创建的同时就切换过去的。")]),t._v(" "),s("p",[t._v("设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支， 你可以在任意时间使用 "),s("code",[t._v("-u")]),t._v(" 或 "),s("code",[t._v("--set-upstream-to")]),t._v(" 选项运行 "),s("code",[t._v("git branch")]),t._v(" 来显式地设置： "),s("code",[t._v("git branch -u origin/issue")]),t._v("。")]),t._v(" "),s("p",[t._v("如果想要查看设置的所有跟踪分支，可以使用 "),s("code",[t._v("git branch")]),t._v(" 的 "),s("code",[t._v("-vv")]),t._v(" 选项："),s("code",[t._v("git branch -vv")]),t._v("。 这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。")]),t._v(" "),s("p",[t._v("第二，使用 "),s("code",[t._v("git pull")])]),t._v(" "),s("p",[t._v("当 "),s("code",[t._v("git fetch")]),t._v(" 命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。 它只会获取数据然后让你自己合并。"),s("code",[t._v("git pull")]),t._v(" 会查找当前分支所跟踪的服务器与分支， 从服务器上抓取数据然后尝试合并入那个远程分支。在大多数情况下它的含义是一个 "),s("code",[t._v("git fetch")]),t._v(" 紧接着一个 "),s("code",[t._v("git merge")]),t._v(" 命令。")]),t._v(" "),s("p",[t._v("最后，如果做完工作了，并且将其合并到了远程仓库的 "),s("code",[t._v("master")]),t._v(" 分支（或任何其他稳定代码分支），可以运行带有 "),s("code",[t._v("--delete")]),t._v(" 选项的 "),s("code",[t._v("git push")]),t._v(" 命令来删除一个远程分支："),s("code",[t._v("$ git push origin --delete issue")])])])}),[],!1,null,null,null);e.default=v.exports}}]);