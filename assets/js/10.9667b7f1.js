(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{435:function(i,t,_){"use strict";_.r(t);var v=_(65),l=Object(v.a)({},(function(){var i=this,t=i.$createElement,_=i._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":i.$parent.slotKey}},[_("h1",{attrs:{id:"概览"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概览"}},[i._v("#")]),i._v(" 概览")]),i._v(" "),_("h2",{attrs:{id:"一些链接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一些链接"}},[i._v("#")]),i._v(" 一些链接")]),i._v(" "),_("p",[_("a",{attrs:{href:"https://git-scm.com",target:"_blank",rel:"noopener noreferrer"}},[i._v("Git官网"),_("OutboundLink")],1)]),i._v(" "),_("p",[_("a",{attrs:{href:"https://git-scm.com/download/win",target:"_blank",rel:"noopener noreferrer"}},[i._v("Git下载"),_("OutboundLink")],1)]),i._v(" "),_("p",[_("a",{attrs:{href:"https://git-scm.com/docs",target:"_blank",rel:"noopener noreferrer"}},[i._v("Git官方文档"),_("OutboundLink")],1)]),i._v(" "),_("p",[_("a",{attrs:{href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"}},[i._v("Pro Git 第二版（2014）中文版"),_("OutboundLink")],1)]),i._v(" "),_("h2",{attrs:{id:"常用命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[i._v("#")]),i._v(" 常用命令")]),i._v(" "),_("ul",[_("li",[_("p",[i._v("git init 初始化仓库")])]),i._v(" "),_("li",[_("p",[_("code",[i._v("git init name")]),i._v(" 在当前目录下创建一个名字叫做name的仓库，需要使用"),_("code",[i._v("cd name")]),i._v("进入仓库后操作")])]),i._v(" "),_("li",[_("p",[i._v("git status 查看文件的状态")]),i._v(" "),_("ul",[_("li",[i._v("红色：工作区修改新增删除等操作，没有提交到暂存区")])])]),i._v(" "),_("li",[_("p",[i._v("git add .(*) :提交所有的工作区修改到暂存区  git add 文件名：把某个文件提交到暂存区")])]),i._v(" "),_("li",[_("p",[i._v("git commit -m '注释信息'：把暂存区的内容 提交到了仓库区，生成一个新的版本")])]),i._v(" "),_("li",[_("p",[i._v("git commit -am ’注释信息‘：可以自动直接把工作区修改提交到暂存区并提交到仓库生成新的版本（只能操作修改的文件，新增文件是不能直接这样操作的）")])]),i._v(" "),_("li",[_("p",[i._v("git commit 直接进入到vim中书写注释信息，并且提交到仓库区")])]),i._v(" "),_("li",[_("p",[i._v("git restore 文件名/.  撤销工作区的修改 恢复到上一次的提交")])]),i._v(" "),_("li",[_("p",[i._v("git restore --staged ./文件名 撤销暂存区的修改，回退到工作修改")])]),i._v(" "),_("li",[_("p",[i._v("新增文件不能使用git restore撤回，直接删除即可")])]),i._v(" "),_("li",[_("p",[i._v("git rm 文件  ：删除了工作区和暂存区的文件")])]),i._v(" "),_("li",[_("p",[i._v("git rm --cached 文件：删除了暂存区的文件")])]),i._v(" "),_("li",[_("p",[i._v("git rm -f 文件：当工作区和暂存区不一致的时候，强制删除工作区和暂存区中的某个文件")])]),i._v(" "),_("li",[_("p",[i._v("git mv 01.txt 02.txt:把工作区和暂存区的01.txt命名为02.txt")])]),i._v(" "),_("li",[_("p",[i._v("git log ：打印所有的历史操作")])]),i._v(" "),_("li",[_("p",[i._v("git log --oneline 打印所有历史操作 简略显示")])]),i._v(" "),_("li",[_("p",[i._v("git log -p 展示历史操作及差异")])]),i._v(" "),_("li",[_("p",[i._v("git log -p -2 展示历史操作及差异 最近两次")])]),i._v(" "),_("li",[_("p",[i._v("git diff 查看工作区和暂存区的差异 （无法比较新增文件）")])]),i._v(" "),_("li",[_("p",[i._v("git diff --cached 比较暂存区和仓库区最新版本的差异")])]),i._v(" "),_("li",[_("p",[i._v("git diff a b 比较两个版本的差异")])]),i._v(" "),_("li",[_("p",[i._v("git reset --hard/--mixed/--soft 版本号：回退到某个版本号")]),i._v(" "),_("ul",[_("li",[i._v("--hard 版本区回退 重置工作区和暂存区")]),i._v(" "),_("li",[i._v("--mixed 版本去回退 重置暂存区")]),i._v(" "),_("li",[i._v("--soft 版本区回退 不会重置工作区和暂存区")])])]),i._v(" "),_("li",[_("p",[i._v("git reflog --oneline ：查看所有的提交及回退操作")])]),i._v(" "),_("li",[_("p",[i._v("git reset --hard HEAD^:一个^代表回退一个")])]),i._v(" "),_("li",[_("p",[i._v("git reset --hard HEAD~2:~后边的数字代表回退几个")])]),i._v(" "),_("li",[_("p",[i._v("配置忽略：")]),i._v(" "),_("ul",[_("li",[i._v("如果是一个只存在工作区的文件，则直接使用.gitignore配置会略即可")]),i._v(" "),_("li",[i._v("如果仓库已经提交了当前的文件，则先把暂存区的被忽略的文件删除（git rm --cached 文件：删除了暂存区的文件），把删除被忽略文件后的暂存区提交给仓库区，此时工作区的这个文件就是未跟踪状态，可以再去配置忽略")])])]),i._v(" "),_("li",[_("p",[i._v("git  branch 分支名：创建分支")])]),i._v(" "),_("li",[_("p",[i._v("git branch：查看所有分支及当前所在分支")])]),i._v(" "),_("li",[_("p",[i._v("git checkout 分支名：切换某个分支（切换分支前一定要提交当前的代码）")])]),i._v(" "),_("li",[_("p",[i._v("git checkout -b 分支名：创建并切换到某个分支")])]),i._v(" "),_("li",[_("p",[i._v("git checkout -B 分支名：创建并切换分支，但是如果已经有同名分支 则直接强制覆盖")])]),i._v(" "),_("li",[_("p",[i._v("git checkout -b 分支名 commitID：从指定的版本创建分支")])]),i._v(" "),_("li",[_("p",[i._v("git checkout --orphan 分支名：创建一个裸分支")])]),i._v(" "),_("li",[_("p",[i._v("git branch -d 分支名 ：删除某个分支")])]),i._v(" "),_("li",[_("p",[i._v("git branch -D 分支名 ：强制删除某个分支")])]),i._v(" "),_("li",[_("p",[i._v("git merge 分支名：合并其他分支")])])]),i._v(" "),_("h2",{attrs:{id:"一些工作流"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一些工作流"}},[i._v("#")]),i._v(" 一些工作流")]),i._v(" "),_("p",[_("strong",[i._v("1")])]),i._v(" "),_("blockquote",[_("ol",[_("li",[i._v("项目经理创建文件架构")]),i._v(" "),_("li",[i._v("项目经理创建A和B分支")]),i._v(" "),_("li",[i._v("A开发 并提交")]),i._v(" "),_("li",[i._v("B开发并提交")]),i._v(" "),_("li",[i._v("到主分支上 分别合并A和B分支 （如果出现冲突 则需要解决冲突，解决完冲突 切记要提交）")]),i._v(" "),_("li",[i._v("A上班了，首先要把主分支的代码合并到自己的分支上")]),i._v(" "),_("li",[i._v("B上班了，首先要把主分支的代码合并到自己的分支上")]),i._v(" "),_("li",[i._v("。。。。。")])])]),i._v(" "),_("p",[_("strong",[i._v("2")])]),i._v(" "),_("blockquote",[_("p",[i._v("本地有仓库，远程没有仓库")]),i._v(" "),_("ul",[_("li",[i._v("创建远程仓库")]),i._v(" "),_("li",[i._v("git remote add origin 仓库地址：把本地仓库和远程仓库进行关联")]),i._v(" "),_("li",[i._v("git push -u origin master 推送master分支")]),i._v(" "),_("li",[i._v("git push -u origin --all  推送所有的分支")])]),i._v(" "),_("p",[i._v("git remote：展示当前本地仓库关联的所有的远程仓库")]),i._v(" "),_("p",[i._v("git remote rm 别名：删除某个关联")]),i._v(" "),_("p",[i._v("git clone 地址：克隆远程仓库")]),i._v(" "),_("p",[i._v("git pull origin master:更新master分支（一般在推送之前先拉取更新，然后处理冲突之后再推送，否则推送可能失败）")]),i._v(" "),_("p",[i._v("git push origin master（拉取更新处理冲突之后，提交到本地仓库 然后再推送到远程仓库）")]),i._v(" "),_("p",[i._v("git pull origin A:A: 在本地创建一个A分支 然后拉取A分支到本地")]),i._v(" "),_("ul",[_("li",[i._v("项目组长在本地创建的项目的架构，并创建远程仓库 推送远程仓库\n"),_("ul",[_("li",[i._v("git init 初始化本地仓库")]),i._v(" "),_("li",[i._v("git add .    git commit -m ‘初始化’：把本地初始化代码提交到本地仓库")]),i._v(" "),_("li",[i._v("git remote add origin 地址：把本地仓库和远程仓库关联")]),i._v(" "),_("li",[i._v("git push origin master ：把本地仓库的master分支推送到远程仓库")]),i._v(" "),_("li",[i._v("git branch A     git branch B  ：在本地创建A和B分支")]),i._v(" "),_("li",[i._v("git push origin --all 把本地所有的分支都推送到远程仓库")])])]),i._v(" "),_("li",[i._v("A从远程仓库拉取代码，在自己的分支上进行开发工作\n"),_("ul",[_("li",[i._v("git clone XXX：先克隆远程代码")]),i._v(" "),_("li",[i._v("git pull origin A:A ：拉取A分支")]),i._v(" "),_("li",[i._v("git checkout A：要切换到A分支 开始工作")]),i._v(" "),_("li",[i._v("git add .  git commit -m 'XX'：当A分支开发完毕，提交本地的A分支")])])]),i._v(" "),_("li",[i._v("B从远程仓库拉取代码 在自己的分支上进行开发换工作\n"),_("ul",[_("li",[i._v("git clone XXX：先克隆远程代码")]),i._v(" "),_("li",[i._v("git pull origin B ：拉取B分支")]),i._v(" "),_("li",[i._v("git checkout B：要切换到B分支 开始工作")]),i._v(" "),_("li",[i._v("git add .  git commit -m 'XX'：当B分支开发完毕，提交本地的B分支")])])]),i._v(" "),_("li",[i._v("A和B开发完成之后，把自己的代码推送到远程仓库\n"),_("ul",[_("li",[i._v("git  push origin A：把自己的分支修改推到远程 然后下班")]),i._v(" "),_("li",[i._v("git  push origin B：把自己的分支修改推到远程 然后下班")])])]),i._v(" "),_("li",[i._v("项目组长合并A和B的代码，并更新至远程仓库\n"),_("ul",[_("li",[i._v("git pull origin A：拉取A分支的更新 并合并到master上")]),i._v(" "),_("li",[i._v("git pull origin B：拉取B分支的更新，并合并到master")]),i._v(" "),_("li",[i._v("git add .  git commit -m 'xXX':合并分支 的时候可能会出现冲突，解决完冲突之后，要处理冲突并重新提交")]),i._v(" "),_("li",[i._v("git push origin master：把最新的合并的完成代码推送到远程仓库")])])]),i._v(" "),_("li",[i._v("A和B第二天上班 拉取新的代码，然后继续各自开发\n"),_("ul",[_("li",[i._v("git pull origin master：在各自的分支上拉取master的更新，并且直接合并到自己的代码中，然后可以开始第二天的开发")])])])])])])}),[],!1,null,null,null);t.default=l.exports}}]);