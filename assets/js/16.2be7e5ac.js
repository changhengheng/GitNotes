(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{443:function(t,a,s){"use strict";s.r(a);var e=s(65),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"撤消操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#撤消操作"}},[t._v("#")]),t._v(" 撤消操作")]),t._v(" "),s("h2",{attrs:{id:"重新提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重新提交"}},[t._v("#")]),t._v(" 重新提交")]),t._v(" "),s("p",[t._v("在任何一个阶段，你都有可能想要撤消某些操作。有些撤消操作是不可逆的。 这是在使用 Git 的过程中，会因为操作失误而导致之前的工作丢失的少有的几个地方之一。")]),t._v(" "),s("p",[t._v("如果提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 运行带有 "),s("code",[t._v("--amend")]),t._v(" 选项的提交命令来重新提交：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend\n")])])]),s("p",[t._v("这个命令会将暂存区中的文件提交。 如果自上次提交以来你还未做任何修改（例如，在上次提交后马上执行了此命令）， 那么快照会保持不变，而你所修改的只是提交信息。")]),t._v(" "),s("p",[t._v("该命令会进入VIM编辑器。文本编辑器启动后，可以看到之前的提交信息。 编辑后保存会覆盖原来的提交信息。")]),t._v(" "),s("p",[t._v("例如，你提交后发现忘记了暂存某些需要的修改，可以像下面这样操作：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'initial commit'")]),t._v("// 第一次有失误的提交\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" forgotten_file // 把遗漏的文件添加到暂存区\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend // 编辑提交信息重新提交\n")])])]),s("p",[t._v("最终你只会有一个提交——第二次提交将代替第一次提交的结果。")]),t._v(" "),s("p",[t._v("当你在修补最后的提交时，与其说是修复旧提交，倒不如说是完全用一个 "),s("strong",[t._v("新的提交")]),t._v(" 替换旧的提交， 理解这一点非常重要。从效果上来说，就像是旧有的提交从未存在过一样，它并不会出现在仓库的历史中。")]),t._v(" "),s("h2",{attrs:{id:"取消暂存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#取消暂存"}},[t._v("#")]),t._v(" 取消暂存")]),t._v(" "),s("p",[t._v("如何操作暂存区和工作目录中已修改的文件？")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("git reset HEAD <file>...")]),t._v(" 来取消暂存某一个文件")]),t._v(" "),s("p",[t._v("到目前为止这个神奇的调用就是你需要对 "),s("code",[t._v("git reset")]),t._v(" 命令了解的全部。 我们将会在 "),s("a",{attrs:{href:"https://git-scm.com/book/zh/v2/ch00/_git_reset",target:"_blank",rel:"noopener noreferrer"}},[t._v("重置揭密"),s("OutboundLink")],1),t._v(" 中了解 "),s("code",[t._v("reset")]),t._v(" 的更多细节以及如何掌握它做一些真正有趣的事。")]),t._v(" "),s("h2",{attrs:{id:"撤销修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#撤销修改"}},[t._v("#")]),t._v(" 撤销修改")]),t._v(" "),s("p",[t._v("未完成")]),t._v(" "),s("p",[t._v("现在有了最新的git restore命令")])])}),[],!1,null,null,null);a.default=r.exports}}]);