(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{447:function(e,t,v){"use strict";v.r(t);var _=v(65),s=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"分支开发工作流"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分支开发工作流"}},[e._v("#")]),e._v(" 分支开发工作流")]),e._v(" "),v("p",[e._v("本节，我们会介绍一些常见的利用分支进行开发的工作流程。")]),e._v(" "),v("h2",{attrs:{id:"长期分支"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#长期分支"}},[e._v("#")]),e._v(" 长期分支")]),e._v(" "),v("p",[e._v("因为 Git 使用简单的三方合并，所以就算在一段较长的时间内，反复把一个分支合并入另一个分支，也不是什么难事。 也就是说，在整个项目开发周期的不同阶段，你可以同时拥有多个开放的分支；你可以定期地把某些主题分支合并入其他分支中。")]),e._v(" "),v("p",[e._v("许多使用 Git 的开发者都喜欢使用这种方式来工作，比如只在 "),v("code",[e._v("master")]),e._v(" 分支上保留完全稳定的代码——有可能仅仅是已经发布或即将发布的代码。 他们还有一些名为 "),v("code",[e._v("develop")]),e._v(" 或者 "),v("code",[e._v("next")]),e._v(" 的平行分支，被用来做后续开发或者测试稳定性——这些分支不必保持绝对稳定，但是一旦达到稳定状态，它们就可以被合并入 "),v("code",[e._v("master")]),e._v(" 分支了。 这样，在确保这些已完成的主题分支（短期分支，比如之前的 "),v("code",[e._v("iss53")]),e._v(" 分支）能够通过所有测试，并且不会引入更多 bug 之后，就可以合并入主干分支中，等待下一次的发布。")]),e._v(" "),v("p",[e._v("事实上我们刚才讨论的，是随着你的提交而不断右移的指针。 稳定分支的指针总是在提交历史中落后一大截，而前沿分支的指针往往比较靠前。")]),e._v(" "),v("p",[e._v("通常把他们想象成流水线（work silos）可能更好理解一点，那些经过测试考验的提交会被遴选到更加稳定的流水线上去。")]),e._v(" "),v("p",[e._v("你可以用这种方法维护不同层次的稳定性。 一些大型项目还有一个 "),v("code",[e._v("proposed")]),e._v("（建议） 或 "),v("code",[e._v("pu: proposed updates")]),e._v("（建议更新）分支，它可能因包含一些不成熟的内容而不能进入 "),v("code",[e._v("next")]),e._v(" 或者 "),v("code",[e._v("master")]),e._v(" 分支。 这么做的目的是使你的分支具有不同级别的稳定性；当它们具有一定程度的稳定性后，再把它们合并入具有更高级别稳定性的分支中。 再次强调一下，使用多个长期分支的方法并非必要，但是这么做通常很有帮助，尤其是当你在一个非常庞大或者复杂的项目中工作时。")]),e._v(" "),v("h2",{attrs:{id:"主题分支"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#主题分支"}},[e._v("#")]),e._v(" 主题分支")]),e._v(" "),v("p",[e._v("主题分支对任何规模的项目都适用。 主题分支是一种短期分支，它被用来实现单一特性或其相关工作。 也许你从来没有在其他的版本控制系统（"),v("code",[e._v("VCS")]),e._v("）上这么做过，因为在那些版本控制系统中创建和合并分支通常很费劲。 然而，在 Git 中一天之内多次创建、使用、合并、删除分支都很常见。")]),e._v(" "),v("p",[e._v("你已经在上一节中你创建的 "),v("code",[e._v("demand")]),e._v(" 和 "),v("code",[e._v("issue")]),e._v(" 主题分支中看到过这种用法。 你在上一节用到的主题分支（ "),v("code",[e._v("demand")]),e._v(" 和 "),v("code",[e._v("issue")]),e._v(" 分支）中提交了一些更新，并且在它们合并入主干分支之后，你又删除了它们。 这项技术能使你快速并且完整地进行上下文切换（context-switch）——因为你的工作被分散到不同的流水线中，在不同的流水线中每个分支都仅与其目标特性相关，因此，在做代码审查之类的工作的时候就能更加容易地看出你做了哪些改动。 你可以把做出的改动在主题分支中保留几分钟、几天甚至几个月，等它们成熟之后再合并，而不用在乎它们建立的顺序或工作进度。")]),e._v(" "),v("p",[e._v("我们将会在 "),v("a",{attrs:{href:"https://git-scm.com/book/zh/v2/ch00/ch05-distributed-git",target:"_blank",rel:"noopener noreferrer"}},[e._v("分布式 Git"),v("OutboundLink")],1),e._v(" 中向你揭示更多有关分支工作流的细节， 因此，请确保你阅读完那个章节之后，再来决定你的下个项目要使用什么样的分支策略（branching scheme）。")]),e._v(" "),v("p",[e._v("请牢记，当你做这么多操作的时候，这些分支全部都存于本地。 当你新建和合并分支的时候，所有这一切都只发生在你本地的 Git 版本库中 —— 没有与服务器发生交互。")])])}),[],!1,null,null,null);t.default=s.exports}}]);